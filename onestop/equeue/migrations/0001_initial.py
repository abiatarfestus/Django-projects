# Generated by Django 3.1 on 2021-07-30 19:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('', 'Select the part service category'), ('Hair and Beauty', 'Hair and Beauty'), ('Miscellaneous', 'Miscellaneous'), ('Local Authority', 'Local Authority'), ('Health and Wellness', 'Health and Wellness'), ('Banking and Finance', 'Banking and Finance')], default='Miscellaneous', max_length=20)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(max_length=20)),
                ('entity_type', models.CharField(choices=[('', 'Select the part of speech of your definition'), ('Noun [C]', 'Private'), ('Noun [U]', 'Public'), ('Noun [U]', 'Parastatal')], max_length=10)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('town', models.CharField(max_length=255)),
                ('contact_number', models.CharField(max_length=10, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('website', models.CharField(blank=True, max_length=255)),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format=None, keep_meta=True, quality=100, size=[50, 50], upload_to='service_provider_logos', verbose_name='logo')),
                ('join_date', models.DateField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceEnrolment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_requirements', models.TextField(blank=True, default='There are no requirements defined for this service.')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='equeue.service')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='equeue.serviceprovider')),
            ],
            options={
                'ordering': ['service_provider'],
            },
        ),
        migrations.CreateModel(
            name='ServedCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.IntegerField()),
                ('service_enrolment_id', models.IntegerField()),
                ('date_time_served', models.DateTimeField(auto_now_add=True)),
                ('service_duration', models.IntegerField()),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='QueuedCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_time', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='equeue.serviceenrolment')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CustomerReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendliness', models.IntegerField(choices=[('', 'Select the part service category'), (3, 'Excellent'), (2, 'Good'), (1, 'Poor')])),
                ('knowledge', models.IntegerField(choices=[('', 'Select the part service category'), (3, 'Excellent'), (2, 'Good'), (1, 'Poor')])),
                ('pace', models.IntegerField(choices=[('', 'Select the part service category'), (3, 'Excellent'), (2, 'Good'), (1, 'Poor')])),
                ('service_reviewed', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='equeue.servedcustomer')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CancelledCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('queue_id', models.IntegerField()),
                ('customer_id', models.IntegerField()),
                ('date_time_cancelled', models.DateTimeField(auto_now_add=True)),
                ('cancelled_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddConstraint(
            model_name='serviceenrolment',
            constraint=models.UniqueConstraint(fields=('service', 'service_provider'), name='unique_enrolment'),
        ),
        migrations.AddConstraint(
            model_name='queuedcustomer',
            constraint=models.UniqueConstraint(fields=('service', 'customer'), name='unique_queuer'),
        ),
    ]
